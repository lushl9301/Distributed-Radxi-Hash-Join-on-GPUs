#include "../../data/data.hpp"
#include "../../utils/gpu/cuda_parameters.hpp"
namespace SD {
namespace eth {

__global__ void probe_kernel_compressed(data *rHashTable,
                                        data *sID,
                                        int rTupleNum,
                                        int sTupleNum,
                                        int rHashTableBucketNum,
                                        int *globalPtr,
                                        uint32_t shiftBits,
                                        uint32_t keyShift) {
  uint numWorkItems = gridDim.x * blockDim.x;
  uint tid = blockIdx.x * blockDim.x + threadIdx.x;

  int key, hash, count;
  //int matchedNum;
  int hashBucketSize = rTupleNum / rHashTableBucketNum;

  //pointer storing the index of each output tuple within the outputs generated by a block of threads
  __shared__ int sharedPtr;

  while (tid < sTupleNum) {
    //get one tuple from S table
    key = sID[tid];

    //since hash value calculation consumes only tens ms, so GPU will finish it first
    hash = key >> shiftBits % rHashTableBucketNum;

    //find out matched tuples in hash table for R table
    count = 0;

    sharedPtr = 0;

    //barrier
    __syncthreads();

    while (count < hashBucketSize) {
      if (rHashTable[hash * hashBucketSize + count] >> keyShift == key >> keyShift) {
        atomicAdd(&sharedPtr, 1);
      }
      count += 1;
    }

    //barrier
    __syncthreads();

    if (threadIdx.x == 0) {
      //checking if there is space in the global buffer for writing the output
      //count total number of items
      atomicAdd(globalPtr, sharedPtr);
    }

    //barrier
    __syncthreads();

    tid += numWorkItems;
  }
}

}
}